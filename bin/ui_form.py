# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'setup.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#####################
# SimianWrapper: A GUI Wrapper for the Simian Similarity Analyzer,
# created by Simon Harris, featuring Kdiff3 integration to live-view files.
# Copyright (C) 2020 Francisco Serrano
#
# This program is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published  by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# https://www.gnu.org/licenses/gpl-3.0.en.html
#################

from PyQt5 import QtCore, QtGui, QtWidgets
from qtFunctions import browseDir, runSimian, runKdiff3, openSetup
import sys


class Ui_SimianWindow(object):
    def setupUi(self, SimianWindow):
        SimianWindow.setObjectName("SimianWindow")
        SimianWindow.resize(754, 398)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(SimianWindow.sizePolicy().hasHeightForWidth())
        SimianWindow.setSizePolicy(sizePolicy)
        SimianWindow.setMinimumSize(QtCore.QSize(0, 0))
        SimianWindow.setBaseSize(QtCore.QSize(0, 0))
        self.MainContents = QtWidgets.QWidget(SimianWindow)
        self.MainContents.setObjectName("MainContents")
        self.gridLayout = QtWidgets.QGridLayout(self.MainContents)
        self.gridLayout.setObjectName("gridLayout")
        self.ResultsGrid = QtWidgets.QGridLayout()
        self.ResultsGrid.setObjectName("ResultsGrid")
        self.ResultsHScroll = QtWidgets.QScrollBar(self.MainContents)
        self.ResultsHScroll.setOrientation(QtCore.Qt.Horizontal)
        self.ResultsHScroll.setObjectName("ResultsHScroll")
        self.ResultsGrid.addWidget(self.ResultsHScroll, 1, 1, 1, 3)
        self.pushButton_4 = QtWidgets.QPushButton(self.MainContents)
        self.pushButton_4.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_4.sizePolicy().hasHeightForWidth())
        self.pushButton_4.setSizePolicy(sizePolicy)
        self.pushButton_4.setObjectName("pushButton_4")
        self.ResultsGrid.addWidget(self.pushButton_4, 2, 2, 1, 2)
        self.ResultsVScroll = QtWidgets.QScrollBar(self.MainContents)
        self.ResultsVScroll.setOrientation(QtCore.Qt.Vertical)
        self.ResultsVScroll.setObjectName("ResultsVScroll")
        self.ResultsGrid.addWidget(self.ResultsVScroll, 0, 4, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.MainContents)
        self.pushButton_3.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setObjectName("pushButton_3")
        self.ResultsGrid.addWidget(self.pushButton_3, 2, 1, 1, 1)
        self.ResultsTable = QtWidgets.QListView(self.MainContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ResultsTable.sizePolicy().hasHeightForWidth())
        self.ResultsTable.setSizePolicy(sizePolicy)
        self.ResultsTable.setObjectName("ResultsTable")
        self.ResultsGrid.addWidget(self.ResultsTable, 0, 1, 1, 3)
        self.gridLayout.addLayout(self.ResultsGrid, 0, 0, 4, 1)
        self.FileDirectoryContents = QtWidgets.QHBoxLayout()
        self.FileDirectoryContents.setObjectName("FileDirectoryContents")
        self.FileDirectoryName = QtWidgets.QLabel(self.MainContents)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.FileDirectoryName.setFont(font)
        self.FileDirectoryName.setObjectName("FileDirectoryName")
        self.FileDirectoryContents.addWidget(self.FileDirectoryName)
        self.FileDirectoryText = QtWidgets.QLineEdit(self.MainContents)
        self.FileDirectoryText.setObjectName("FileDirectoryText")
        self.FileDirectoryContents.addWidget(self.FileDirectoryText)
        self.FileDirectoryButton = QtWidgets.QToolButton(self.MainContents)
        self.FileDirectoryButton.setObjectName("FileDirectoryButton")
        self.FileDirectoryContents.addWidget(self.FileDirectoryButton)
        self.gridLayout.addLayout(self.FileDirectoryContents, 0, 1, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(self.MainContents)
        self.textEdit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())
        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setMouseTracking(False)
        self.textEdit.setAcceptDrops(False)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 2, 1, 1, 1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.pushButton = QtWidgets.QPushButton(self.MainContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_5.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.MainContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setCheckable(False)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout_5.addWidget(self.pushButton_2)
        self.gridLayout.addLayout(self.horizontalLayout_5, 3, 1, 1, 1)
        SimianWindow.setCentralWidget(self.MainContents)
        self.statusbar = QtWidgets.QStatusBar(SimianWindow)
        self.statusbar.setObjectName("statusbar")
        SimianWindow.setStatusBar(self.statusbar)
        self.actionClear_Results = QtWidgets.QAction(SimianWindow)
        self.actionClear_Results.setObjectName("actionClear_Results")
        self.actionSave_Results = QtWidgets.QAction(SimianWindow)
        self.actionSave_Results.setObjectName("actionSave_Results")
        self.FileDirectoryName.setBuddy(self.FileDirectoryText)

        self.retranslateUi(SimianWindow)
        self.FileDirectoryButton.clicked.connect(SimianWindow.browseDir)
        self.pushButton.clicked.connect(SimianWindow.runSimian)
        self.pushButton_2.clicked.connect(SimianWindow.openSetup)
        self.pushButton_3.clicked.connect(SimianWindow.runKdiff3)
        self.pushButton_4.clicked.connect(self.ResultsTable.reset)
        self.pushButton.clicked.connect(self.pushButton_4.toggle)
        self.pushButton.clicked.connect(self.pushButton_3.toggle)
        QtCore.QMetaObject.connectSlotsByName(SimianWindow)
        SimianWindow.setTabOrder(self.ResultsTable, self.FileDirectoryText)
        SimianWindow.setTabOrder(self.FileDirectoryText, self.FileDirectoryButton)
        SimianWindow.setTabOrder(self.FileDirectoryButton, self.textEdit)
        SimianWindow.setTabOrder(self.textEdit, self.pushButton_3)
        SimianWindow.setTabOrder(self.pushButton_3, self.pushButton_4)
        SimianWindow.setTabOrder(self.pushButton_4, self.pushButton)
        SimianWindow.setTabOrder(self.pushButton, self.pushButton_2)

    def retranslateUi(self, SimianWindow):
        _translate = QtCore.QCoreApplication.translate
        SimianWindow.setWindowTitle(_translate("SimianWindow", "SimianWrapper"))
        self.pushButton_4.setToolTip(_translate("SimianWindow", "<html><head/><body><p>Clear the list of the results.</p></body></html>"))
        self.pushButton_4.setText(_translate("SimianWindow", "Clear Results"))
        self.pushButton_3.setToolTip(_translate("SimianWindow", "<html><head/><body><p>Open the selected files in Kdiff3 with the given settings in Setup.</p></body></html>"))
        self.pushButton_3.setText(_translate("SimianWindow", "Open Selected in Kdiff3"))
        self.FileDirectoryName.setText(_translate("SimianWindow", "File Directory"))
        self.FileDirectoryButton.setToolTip(_translate("SimianWindow", "<html><head/><body><p>Select the directory that you will be analyzing with Simian.</p></body></html>"))
        self.FileDirectoryButton.setText(_translate("SimianWindow", "..."))
        self.textEdit.setHtml(_translate("SimianWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; font-weight:600; color:#222222; background-color:#ffffff;\">SimianWrapper:</span><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\"> A GUI Wrapper for the Simian Similarity Analyzer, created by Simon Harris, featuring Kdiff3 integration to live-view files.</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">Copyright (C) 2020  Francisco Serrano</span></p>\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">This program is free software: you can redistribute it and/or modify</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.</span></p>\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\"><br /></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">This program is distributed in the hope that it will be useful,</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:13px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; background-color:#ffffff;\"><span style=\" font-family:\'Courier New\'; font-size:8pt; color:#222222; background-color:#ffffff;\">GNU General Public License for more details.</span></p></body></html>"))
        self.pushButton.setToolTip(_translate("SimianWindow", "<html><head/><body><p><span style=\" font-family:\'Helvetica\'; font-size:12px; color:#000000; background-color:#f8f9fa;\">Launches the Simian program with the file directory listed in Setup to compare the files. </span></p><p><span style=\" font-family:\'Helvetica\'; font-size:12px; color:#000000; background-color:#f8f9fa;\">If files are listed, only the compared files will be listed in the Duplicate View.</span></p></body></html>"))
        self.pushButton.setText(_translate("SimianWindow", "Launch with Simian"))
        self.pushButton_2.setToolTip(_translate("SimianWindow", "<html><head/><body><p>Opens the setup, which allows you to set the working file directory where your Simian and Kdiff3 installation is located, as well as command line options.</p></body></html>"))
        self.pushButton_2.setText(_translate("SimianWindow", "Setup"))
        self.actionClear_Results.setText(_translate("SimianWindow", "Clear Results"))
        self.actionSave_Results.setText(_translate("SimianWindow", "Save Results"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    SimianWindow = QtWidgets.QMainWindow()
    ui = Ui_SimianWindow()
    ui.setupUi(SimianWindow)
    SimianWindow.show()
    sys.exit(app.exec_())
